// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: events.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    date, duration, type, detail, rate, amount, newbalance
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, client_id, date, duration, type, detail, rate, amount, newbalance
`

type CreateEventParams struct {
	Date       pgtype.Timestamp `json:"date"`
	Duration   pgtype.Numeric   `json:"duration"`
	Type       pgtype.Text      `json:"type"`
	Detail     pgtype.Text      `json:"detail"`
	Rate       int32            `json:"rate"`
	Amount     pgtype.Numeric   `json:"amount"`
	Newbalance pgtype.Numeric   `json:"newbalance"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Date,
		arg.Duration,
		arg.Type,
		arg.Detail,
		arg.Rate,
		arg.Amount,
		arg.Newbalance,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Date,
		&i.Duration,
		&i.Type,
		&i.Detail,
		&i.Rate,
		&i.Amount,
		&i.Newbalance,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, client_id, date, duration, type, detail, rate, amount, newbalance
FROM events
WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Date,
		&i.Duration,
		&i.Type,
		&i.Detail,
		&i.Rate,
		&i.Amount,
		&i.Newbalance,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, client_id, date, duration, type, detail, rate, amount, newbalance
FROM events
WHERE events.client_id = $1
`

func (q *Queries) GetEvents(ctx context.Context, clientID uuid.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEvents, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Date,
			&i.Duration,
			&i.Type,
			&i.Detail,
			&i.Rate,
			&i.Amount,
			&i.Newbalance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET
    date = $2,
    duration = $3,
    type = $4,
    detail = $5,
    rate = $6,
    amount = $7,
    newbalance = $8
WHERE
    id = $1
`

type UpdateEventParams struct {
	ID         uuid.UUID        `json:"id"`
	Date       pgtype.Timestamp `json:"date"`
	Duration   pgtype.Numeric   `json:"duration"`
	Type       pgtype.Text      `json:"type"`
	Detail     pgtype.Text      `json:"detail"`
	Rate       int32            `json:"rate"`
	Amount     pgtype.Numeric   `json:"amount"`
	Newbalance pgtype.Numeric   `json:"newbalance"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.ID,
		arg.Date,
		arg.Duration,
		arg.Type,
		arg.Detail,
		arg.Rate,
		arg.Amount,
		arg.Newbalance,
	)
	return err
}

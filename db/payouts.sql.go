// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payouts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayout = `-- name: CreatePayout :one
insert into payouts (
  id, user_id, date, amount, client_id
) values (
  $1, $2, $3, $4, $5
) returning id, user_id, client_id, date, amount
`

type CreatePayoutParams struct {
	ID       uuid.UUID        `json:"id"`
	UserID   uuid.UUID        `json:"user_id"`
	Date     pgtype.Timestamp `json:"date"`
	Amount   int32            `json:"amount"`
	ClientID pgtype.UUID      `json:"client_id"`
}

func (q *Queries) CreatePayout(ctx context.Context, arg CreatePayoutParams) (Payout, error) {
	row := q.db.QueryRow(ctx, createPayout,
		arg.ID,
		arg.UserID,
		arg.Date,
		arg.Amount,
		arg.ClientID,
	)
	var i Payout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Date,
		&i.Amount,
	)
	return i, err
}

const deletePayout = `-- name: DeletePayout :exec
delete from payouts
where id = $1
`

func (q *Queries) DeletePayout(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePayout, id)
	return err
}

const getPayout = `-- name: GetPayout :one
select id, user_id, client_id, date, amount 
from payouts
where id = $1
`

func (q *Queries) GetPayout(ctx context.Context, id uuid.UUID) (Payout, error) {
	row := q.db.QueryRow(ctx, getPayout, id)
	var i Payout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Date,
		&i.Amount,
	)
	return i, err
}

const getPayouts = `-- name: GetPayouts :many
select id, user_id, client_id, date, amount 
from payouts
where user_id = $1 or client_id = $1
`

func (q *Queries) GetPayouts(ctx context.Context, userID uuid.UUID) ([]Payout, error) {
	rows, err := q.db.Query(ctx, getPayouts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payout
	for rows.Next() {
		var i Payout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.Date,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (
  title, artist, price
) values (
  $1, $2, $3
) RETURNING id, title, artist, price
`

type CreateAlbumParams struct {
	Title  pgtype.Text    `json:"title"`
	Artist pgtype.Text    `json:"artist"`
	Price  pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum, arg.Title, arg.Artist, arg.Price)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums
WHERE id = $1
`

func (q *Queries) DeleteAlbum(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAlbum, id)
	return err
}

const getAlbum = `-- name: GetAlbum :one
SELECT id, title, artist, price FROM albums
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAlbum(ctx context.Context, id int32) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const listAlbums = `-- name: ListAlbums :many
SELECT id, title, artist, price FROM albums
ORDER BY artist
`

func (q *Queries) ListAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.Query(ctx, listAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbum = `-- name: UpdateAlbum :exec
UPDATE albums
SET title = $2, artist = $3, price = $4
WHERE id = $1
`

type UpdateAlbumParams struct {
	ID     int32          `json:"id"`
	Title  pgtype.Text    `json:"title"`
	Artist pgtype.Text    `json:"artist"`
	Price  pgtype.Numeric `json:"price"`
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) error {
	_, err := q.db.Exec(ctx, updateAlbum,
		arg.ID,
		arg.Title,
		arg.Artist,
		arg.Price,
	)
	return err
}
